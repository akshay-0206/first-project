async updateUserFiles(
    files: Express.Multer.File[],
    oldFilePaths: string | string[],
    userId: string,
  ) {
    const user = await this.authModel.findById(userId);
    if (!user) throw new NotFoundException('User not found');

    const uploadPath = './public/auth';
    const oldPaths = Array.isArray(oldFilePaths)
      ? oldFilePaths
      : [oldFilePaths];

    if (!files || files.length === 0 || oldPaths.length === 0) {
      throw new BadRequestException('No files or oldFilePath(s) provided');
    }

    if (oldPaths.every((p) => user.avatars.includes(p))) {
      if (files.length !== oldPaths.length) {
        throw new BadRequestException(
          'Mismatch between old and new files count',
        );
      }

      const updatedPaths = updateMultipleFiles(files, oldPaths, uploadPath);
      user.avatars = user.avatars.map((originalPath) => {
        const index = oldPaths.indexOf(originalPath);
        return index !== -1 ? updatedPaths[index] : originalPath;
      });

      await user.save();
      return {
        message: 'Avatar(s) updated in avatars[]',
        avatars: user.avatars,
      };
    }

    if (oldPaths.length === 1 && user.avatar === oldPaths[0]) {
      const updatedPath = updateSingleFile(files[0], oldPaths[0], uploadPath);
      user.avatar = updatedPath;
      await user.save();

      return {
        message: 'Avatar updated in avatar',
        avatar: user.avatar,
      };
    }

    throw new BadRequestException(
      'Provided old file path(s) do not match avatar or avatars',
    );
  }